#!/usr/bin/env node

var BPM, BootstrapPackageManager, ProgressBar, bar, dest, events, fa, fs, o, parts, path, program, run, scripts, timer, utils, _;

timer = new Date;

/*
Dependencies
*/


BootstrapPackageManager = require('../lib/main');

ProgressBar = require('progress');

_ = require("underscore");

program = require('commander');

fs = require('fs');

utils = require('../lib/utils');

path = require('path');

/*
Program Stuff
*/


program.version('1.1.2').usage('[options] <dir>').option('-j, --js', 'Add Javascript').option('-c, --css', 'Add CSS').option('-l, --less', 'Add Less').option('-i, --img', 'Add Images').option('-a, --font-awesome', "Add Font Awesome").option('-v, --variables <path>', "Path to a custom `variables.less` file to replace the included version.").option('-f, --font-path <path>', "Set a custom value for the less variable `@FontAwesomePath` for a custom css font path when using Font Awesome.").option('-s, --script <paths>', "Include javascript files (seperated by commas) with custom runtime instructions.").option('-x, --compress', "Compress JS and CSS and include as  an extra \"*.min.*\" file.").option('--compress-js', "Compress JS with UglifyJs and include as an extra \"*.min.js\" file.").option('--compress-css', "Compress CSS with lessc (YUI) and include as an extra \"*.min.css\" file.").option('--no-concat', "Don't concat Javascript files together.").option('--bootstrap-version <version>', "Specific Bootstrap version to use. See http://github.com/twitter/bootstrap/tags for full list.").option('--font-awesome-version <version>', "Specific Font Awesome version to use. See http://github.com/FortAwesome/Font-Awesome/tags for full list.");

program.on('--help', function() {
  console.log('  Note: The default is to include all javascript, css, images and less unless you include at least one of the options `-j`, `-c`, `-l`, or `-i`, in which case only those specified are included.');
  return console.log('');
});

program.parse(process.argv);

/*
Options Set Up
*/


o = {};

o.version = "master";

if (program.bootstrapVersion) {
  o.version = program.bootstrapVersion;
}

if (o.version !== "master" && o.version.substr(0, 1) !== "v") {
  o.version = "v" + o.version;
}

parts = ["img", "css", "less", "js"];

o.parts = _.filter(parts, function(part) {
  return program[part];
});

if (_.isEmpty(o.parts)) {
  o.parts = parts;
}

o.compress = [];

if (program.compress || program.compressCss) {
  o.compress.push("css");
}

if (program.compress || program.compressJs) {
  o.compress.push("js");
}

o.concat = [];

if (program.concat) {
  o.concat.push("js");
}

if (program.fontAwesome) {
  fa = o["font-awesome"] = {};
  if (program.fontPath) {
    fa.path = program.fontPath;
  }
  if (program.fontAwesomeVersion) {
    fa.version = program.fontAwesomeVersion;
  }
  if (fa.version && fa.version.substr(0, 1) !== "v") {
    fa.version = "v" + fa.version;
  }
}

o["variables.less"] = program.variables || null;

/*
Destination Set Up
*/


dest = _.first(program.args);

if (!dest) {
  dest = "bootstrap";
}

/*
The Manager
*/


BPM = new BootstrapPackageManager(dest, o);

/*
The Extras
*/


scripts = _.map(["font-awesome", "variables"], function(f) {
  return path.join(__dirname, "../lib/", f);
});

if (program.script) {
  scripts = scripts.concat(utils.split(program.script, ","));
}

_.each(scripts, function(f) {
  var fp;

  fp = path.resolve(process.cwd(), f);
  return require(fp)(BPM);
});

/*
Display
*/


bar = null;

events = {
  "folder-setup": "\nInitiating...\n",
  "download-start": function() {
    console.log("Downloading Bootstrap...");
    return bar = new ProgressBar('[:bar] :percent :etas', {
      width: 50,
      total: 1,
      incomplete: " "
    });
  },
  "download": function(amt) {
    return bar.tick(amt);
  },
  "download-end": "",
  "unarchive": "Unpacking Bootstrap...\n",
  "copy-parts": "Moving Files...\n",
  "compile-js": "Compiling Javascript...",
  "compile-css": "Compiling CSS...",
  "cleanup": "\nCleaning Up...",
  "fa-download-start": function() {
    console.log("Downloading Font-Awesome...");
    return bar = new ProgressBar('[:bar] :percent :etas', {
      width: 50,
      total: 1,
      incomplete: " "
    });
  },
  "fa-download": function(amt) {
    return bar.tick(amt);
  },
  "fa-download-end": "",
  "fa-unarchive": "Unpacking Font Awesome...\n",
  "fa-copy-fonts": "Installing Font Awesome...",
  "variables-copy": "Copying custom variables.less..."
};

_.each(events, function(e, name) {
  var log;

  if (_.isString(e)) {
    log = e;
    e = function() {
      return console.log(log);
    };
  }
  return BPM.progress.on(name, e);
});

/*
Error Catch
*/


process.on('uncaughtException', function(err) {
  console.log("\n\nBPM crashed with the following error:\n");
  console.error(err.stack);
  return process.exit(1);
});

/*
Run
*/


run = function() {
  return BPM.run(function(err) {
    var time;

    if (err) {
      throw err;
    } else {
      time = Math.round((new Date - timer) / 1000);
      console.log("\nDone in " + time + "s.");
      return process.exit(0);
    }
  });
};

fs.exists(dest, function(exists) {
  if (!exists) {
    return run();
  } else {
    return fs.stat(dest, function(err, stat) {
      if (err) {
        throw err;
      } else if (!stat.isDirectory()) {
        return run();
      } else {
        return program.confirm('Destination folder already exists. Continue? ', function(ok) {
          if (ok) {
            return run();
          } else {
            return process.exit(0);
          }
        });
      }
    });
  }
});
